package com.examplemonevo.Controllers;

import com.examplemonevo.Core_Model.Customer;
import com.examplemonevo.Core_Model.InvestmentAccount;
import com.examplemonevo.DAOs.AccountDAOImpl;
import com.examplemonevo.DAOs.CustomerDAOImpl;
import com.examplemonevo.Utility.DB_Connection;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.TextField;
import javafx.stage.Stage;

import java.io.IOException;
import java.sql.Connection;

public class InvestmentAccountController {

    @FXML private TextField InitialDeposittextfield;
    @FXML private TextField Branchtextfield;
    @FXML private TextField CustomerIdtextfield;

    private AccountDAOImpl accountDAO;
    private CustomerDAOImpl customerDAO;

    @FXML
    public void initialize() {
        try {
            Connection connection = DB_Connection.getConnection();
            accountDAO = new AccountDAOImpl(connection);
            customerDAO = new CustomerDAOImpl(connection);
        } catch (Exception e) {
            e.printStackTrace();
            showAlert("Error", "Failed to connect to the database.");
        }
    }

    @FXML
    private void handleCreateAccount() {
        try {
            String depositText = InitialDeposittextfield.getText().trim();
            String branch = Branchtextfield.getText().trim();
            String customerId = CustomerIdtextfield.getText().trim();

            if (customerId.isEmpty() || branch.isEmpty() || depositText.isEmpty()) {
                showAlert("Error", "Please fill in all fields.");
                return;
            }

            double initialDeposit = Double.parseDouble(depositText);
            if (initialDeposit <= 0) {
                showAlert("Error", "Deposit must be greater than zero.");
                return;
            }

            Customer customer = customerDAO.read(customerId);
            if (customer == null) {
                showAlert("Error", "Invalid Customer ID.");
                return;
            }

            // Account number is auto-generated by the database
            InvestmentAccount account = new InvestmentAccount("TEMP", initialDeposit, branch, customer);
            accountDAO.create(account);

            showAlert("Success", "Investment account created successfully!");
            clearFields();

            Stage stage = (Stage) InitialDeposittextfield.getScene().getWindow();
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/examplemonevo/Login.fxml"));
            Scene scene = new Scene(loader.load());
            stage.setScene(scene);
            stage.show();

        } catch (NumberFormatException e) {
            showAlert("Error", "Invalid deposit amount.");
        } catch (Exception e) {
            e.printStackTrace();
            showAlert("Error", "An unexpected error occurred: " + e.getMessage());
        }

    }




    @FXML
    private void handleBack() {
        try {
            Stage stage = (Stage) InitialDeposittextfield.getScene().getWindow();
            FXMLLoader loader = new FXMLLoader(getClass().getResource("/com/examplemonevo/AccountCreationSelection.fxml"));
            Scene scene = new Scene(loader.load());
            stage.setScene(scene);
            stage.show();
        } catch (IOException e) {
            e.printStackTrace();
            showAlert("Error", "Failed to go back to the previous page.");
        }
    }

    /** Utility method to show alert dialogs */
    private void showAlert(String title, String message) {
        Alert.AlertType type = title.equalsIgnoreCase("Success") ? Alert.AlertType.INFORMATION : Alert.AlertType.ERROR;
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    /** Clears input fields */
    private void clearFields() {
        InitialDeposittextfield.clear();
        Branchtextfield.clear();
        CustomerIdtextfield.clear();
    }
}
